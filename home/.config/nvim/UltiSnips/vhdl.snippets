

# Standard Libraries
snippet libs
library ieee;
use ieee.std_logic_1164.all;
use ieee.numeric_std.all;

use work.pkg_misc.all;
endsnippet

# Xilinx Library
snippet libx
library UNISIM;
use UNISIM.VCOMPONENTS.ALL;
endsnippet

## Entity Declaration
snippet ent
entity ${1:`vim_snippets#Filename()`} is
	generic (
		${2}
	);
	port (
		${3}
	);
end entity;
endsnippet

## Architecture
snippet arc
architecture ${1:rtl} of ${2:`vim_snippets#Filename()`} is

	${3}

begin


end architecture;
endsnippet

## Declarations
# std_logic
snippet cb
constant ${1} : boolean := ${2};
endsnippet
snippet cn
constant ${1} : natural := ${2};
endsnippet
snippet gn
${1}_g : natural := ${2};
endsnippet
snippet sl
signal ${1} : std_logic${2: := '0'};
endsnippet
# std_logic_vector
snippet sv
signal ${1} : std_logic_vector (${2}-1 downto 0)${3: := (others => '0')};
endsnippet
# std_logic in
snippet isl
${1}_i : in std_logic;
endsnippet
# std_logic out
snippet ol
${1}_o : out std_logic;
endsnippet
# std_logic_vector in
snippet is
${1}_i : in  signed (${2}-1 downto 0);
endsnippet
snippet os
${1}_o : out signed (${2}-1 downto 0);
endsnippet
snippet iu
${1}_i : in  unsigned (${2}-1 downto 0);
endsnippet
snippet ou
${1}_o : out unsigned (${2}-1 downto 0);
endsnippet
snippet iv
${1}_i : in  std_logic_vector (${2}-1 downto 0);
endsnippet
# std_logic_vector out
snippet ov
${1}_o : out std_logic_vector (${2}-1 downto 0);
endsnippet
# unsigned
snippet su
signal ${1} : unsigned (${2}-1 downto 0)${3: := (others => '0')};
endsnippet
snippet vl
variable ${1} : std_logic${2: := '0'};
endsnippet
snippet vu
variable ${1} : unsigned (${2}-1 downto 0)${3: := (others => '0')};
endsnippet
snippet vn
variable ${1} : natural${2: := 0};
endsnippet
## Process Statements
# process
snippet pro
process (${1})
begin
	${2}
end process;
endsnippet
# process with clock
snippet proc
process (${1:clk_i})
begin
	if rising_edge($1) then 
		${3}
	end if;
end process;
endsnippet
snippet proce
process (${1:clk_i})
begin
	if rising_edge($1) then if ${2:ce_i} = '1' then
		${3}
	end if; end if;
end process;
endsnippet
# process all
snippet pra
process (${1:all})
begin
	${2}
end process;
endsnippet
## Control Statements
# if
snippet if
if ${1} then
	${VISUAL}${2}
end if;
endsnippet
# if
snippet ife
if ${1} then
	${2}
else
	${3}
end if;
endsnippet
# else
snippet el
else
	${1}
endsnippet
# if
snippet eif
elsif ${1} then
	${2}
endsnippet
# case
snippet ca
case ${1} is
	${2}
end case;
endsnippet
# for
snippet for
for ${1:i} in ${2} ${3:to} ${4} loop
	${VISUAL}${5}
end loop;
endsnippet
# while
snippet wh
while ${1} loop
	${VISUAL}${2}
end loop;
endsnippet
## Misc
# others
snippet oth
(others => ${1:'0'})
endsnippet

snippet vinc
${1} := $1 + ${2:1};
endsnippet

snippet sinc
${1} <= $1 + ${2:1};
endsnippet

snippet amdb
attribute MARK_DEBUG : string;
endsnippet

snippet mdb
attribute MARK_DEBUG of ${1} : signal is "TRUE";
endsnippet

snippet aliascntr
signal ${1}cntr_w_ovr : unsigned (${2} downto 0) := (others => '0');
alias $1cntr_ovr is $1cntr_w_ovr ($2);
alias $1cntr     is $1cntr_w_ovr ($2-1 downto 0);
endsnippet

