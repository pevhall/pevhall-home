
priority -50

extends c

# We want to overwrite everything in parent ft.
priority -49
###########################################################################
#			    Global functions 						  #
###########################################################################

global !p

def write_docstring_args(arglist, snip):
	args = str(arglist).split(',')

	if len(args) > 1:
		c = 0
		for arg in args:
			if c == 0:
				snip.rv += arg
				c = 1
			else:
				snip += '*       : %s' % arg.strip()
	else:
		snip.rv = args[0]


endglobal

###########################################################################
#                            TextMate Snippets                            #
###########################################################################
snippet beginend "$1.begin(), $1.end() (beginend)"
${1:v}${1/^.*?(-)?(>)?$/(?2::(?1:>:.))/}begin(), $1${1/^.*?(-)?(>)?$/(?2::(?1:>:.))/}end()
endsnippet

snippet cl "class .. (class)"
class ${1:`!p snip.rv = snip.basename or "name"`}
{
public:
	${1/(\w+).*/$1/} (${2:arguments});
	virtual ~${1/(\w+).*/$1/} ();

private:
	${0:/* data */}
};
endsnippet

snippet ns "namespace .. (namespace)"
namespace${1/.+/ /m}${1:`!p snip.rv = snip.basename or "name"`}
{
	${VISUAL}$0
}${1/.+/ \/* /m}$1${1/.+/ *\/ /m}
endsnippet

snippet readfile "read file (readF)"
std::vector<char> v;
if (FILE *fp = fopen(${1:"filename"}, "r"))
{
	char buf[1024];
	while(size_t len = fread(buf, 1, sizeof(buf), fp))
		v.insert(v.end(), buf, buf + len);
	fclose(fp);
}
endsnippet

snippet map "std::map (map)"
std::map<${1:key}, ${2:value}> map$0;
endsnippet

snippet vector "std::vector (v)"
std::vector<${1:char}> v$0;
endsnippet

snippet tp "template <typename ..> (template)"
template <typename ${1:_InputIter}>
endsnippet

snippet cla "An entire .h generator" b
#ifndef ${2:`!v substitute(vim_snippets#Filename('$1_H','ClassName'),'.*','\U&\E','')`}
#define $2

class ${1:`!v substitute(substitute(vim_snippets#Filename('$1','ClassName'),'^.','\u&',''), '_\(\w\)', '\u\1', 'g')`}
{
private:
	$3

public:
	$1();
	virtual ~$1();
};

#endif /* $2 */
endsnippet


snippet fnc "Basic c++ doxygen function template" b
/**
* @brief: ${4:brief}
*
* @param: `!p write_docstring_args(t[3],snip)`
*
* @return: `!p snip.rv = t[1]`
*/
${1:ReturnType} ${2:FunctionName}(${3:param})
{
	${0}
}
endsnippet
# vim:ft=snippets:


extends c

##
## Preprocessor
# #include <...>
snippet incc
#include <${1:iostream}>
endsnippet
## STL Collections
# std::array
snippet array
std::array<${1:T}, ${2:N}> ${3};
endsnippet
# std::vector
snippet vector
std::vector<${1:T}> ${2};
endsnippet
# std::deque
snippet deque
std::deque<${1:T}> ${2};
endsnippet
# std::forward_list
snippet flist
std::forward_list<${1:T}> ${2};
endsnippet
# std::list
snippet list
std::list<${1:T}> ${2};
# std::set
snippet set
std::set<${1:T}> ${2};
endsnippet
# std::map
snippet map
std::map<${1:Key}, ${2:T}> ${3};
# std::multiset
snippet mset
std::multiset<${1:T}> ${2};
endsnippet
# std::multimap
snippet mmap
std::multimap<${1:Key}, ${2:T}> ${3};
# std::unordered_set
snippet uset
std::unordered_set<${1:T}> ${2};
endsnippet
# std::unordered_map
snippet umap
std::unordered_map<${1:Key}, ${2:T}> ${3};
# std::unordered_multiset
snippet umset
std::unordered_multiset<${1:T}> ${2};
endsnippet
# std::unordered_multimap
snippet ummap
std::unordered_multimap<${1:Key}, ${2:T}> ${3};
# std::stack
snippet stack
std::stack<${1:T}> ${2};
endsnippet
# std::queue
snippet queue
std::queue<${1:T}> ${2};
endsnippet
# std::priority_queue
snippet pqueue
std::priority_queue<${1:T}> ${2};
endsnippet
##
## STL smart pointers
# std::shared_ptr
snippet msp
auto ${1} = std::make_shared<${2:T}>(${3});
endsnippet
# std::unique_ptr
snippet mup
auto ${1} = std::make_unique<${2:T}>(${3});
endsnippet
##
## Access Modifiers
# private
snippet pri
private
endsnippet
# protected
snippet pro
protected
endsnippet
# public
snippet pub
public
endsnippet
# friend
snippet fr
friend
endsnippet
# mutable
snippet mu
mutable
endsnippet
##
## Class
# class
snippet cl
/*! \class $1
 *  \brief ${3:Brief class description}
 *
 *  ${4:Detailed description}
 */
class ${1:`vim_snippets#Filename('$1', 'name')`}
{
public:
	$1(${2});
	virtual ~$1();

protected:
	m_${5}; /*!< ${6:Member description} */
};
endsnippet
# member function implementation
snippet mfun
${4:void} ${1:`vim_snippets#Filename('$1', 'ClassName')`}::${2:memberFunction}(${3}) {
	${0}
}
endsnippet
# member function implementation without parameters
snippet dmfun0
/*! \brief ${4:Brief function description here}
 *
 *  ${5:Detailed description}
 *
 * \return ${6:Return parameter description}
 */
${3:void} ${1:`vim_snippets#Filename('$1', 'ClassName')`}::${2:memberFunction}() {
	${0}
}
endsnippet
# member function implementation with one parameter
snippet dmfun1
/*! \brief ${6:Brief function description here}
 *
 *  ${7:Detailed description}
 *
 * \param $4 ${8:Parameter description}
 * \return ${9:Return parameter description}
 */
${5:void} ${1:`vim_snippets#Filename('$1', 'ClassName')`}::${2:memberFunction}(${3:Type} ${4:Parameter}) {
	${0}
}
endsnippet
# member function implementation with two parameter
snippet dmfun2
/*! \brief ${8:Brief function description here}
 *
 *  ${9:Detailed description}
 *
 * \param $4 ${10:Parameter description}
 * \param $6 ${11:Parameter description}
 * \return ${12:Return parameter description}
 */
${7:void} ${1:`vim_snippets#Filename('$1', 'ClassName')`}::${2:memberFunction}(${3:Type} ${4:Parameter},${5:Type} ${6:Parameter}) {
	${0}
}
endsnippet
# namespace
#namespace ${1:`vim_snippets#Filename('', 'my')`} {
snippet ns
namespace ${1:`!p snip.rv = '.'.split(snip.fn)[0]`} {
${0}
} /* namespace $1 */
endsnippet
snippet ans
namespace {
${0}
}
endsnippet
##
## Input/Output
# std::cout
snippet cout
std::cout << "${1}\n";
endsnippet
snippet coutdb
std::cout <<__FILE__<<":"<<__LINE__<<": ${VISUAL}${1}" << std::endl;
endsnippet
# std::cin
snippet cin
std::cin >> ${1};
endsnippet
##
## Casts
# static
snippet sca
static_cast<${1:unsigned}>(${2:expr})${3}
endsnippet
# dynamic
snippet dca
dynamic_cast<${1:unsigned}>(${2:expr})${3}
endsnippet
# reinterpret
snippet rca
reinterpret_cast<${1:unsigned}>(${2:expr})${3}
endsnippet
# const
snippet cca
const_cast<${1:unsigned}>(${2:expr})${3}
endsnippet
## Iteration
# for i
snippet fori
for (int ${2:i} = 0; $2 < ${1:count}; $2${3:++}) {
	${4}
}
endsnippet

# foreach
snippet fore
for (${1:auto} ${2:i} : ${3:container}) {
	${4}
}
endsnippet
# iterator
snippet iter
for (${1:std::vector}<${2:type}>::${3:const_iterator} ${4:i} = ${5:container}.begin(); $4 != $5.end(); ++$4) {
	${6}
}
endsnippet

# auto iterator
snippet itera
for (auto ${1:i} = ${2:container}.begin(); $1 != $2.end(); ++$1) {
	${3:std::cout << *$1 << std::endl;}
}
endsnippet
##
## Lambdas
# lamda (one line)
snippet ld
[${1}](${2}){${3}};
endsnippet
# lambda (multi-line)
snippet lld
[${1}](${2})
{
	${3}
};
endsnippet
# snippets exception
snippet try
try {
	${VISUAL}$0
} catch(${1}) {

}
endsnippet
#auto function
snippet af 
auto ${1:name}(${2}) -> ${3:void}
{
	${0}
};
endsnippet
snippet cx "complex" i
std::complex<${VISUAL}$0>
endsnippet

snippet sp "Shared Pointer" i
std::shared_ptr<${1:`!p
snip.rv = snip.v.text.strip("*") or "klass"
`}>
endsnippet
snippet up "Unique Pointer" i
std::unique_ptr<${1:`!p
snip.rv = snip.v.text.strip("*") or "klass"
`}>
endsnippet
snippet vec "vector" i
std::vector<${VISUAL}$0>
endsnippet
